mod_auth_connect is an Apache authentication/authorization module that allows an Apache
server to operate as an OpenID Connect Relying Party.

It requires users to authenticate at an external OpenID Connect Identity Provider
using the OpenID Connect Basic Client or Implicit Client profile.

It sets the REMOTE_USER variable to the id_token sub claim, other id_token claims
are passed in HTTP headers, together with those (optionally) obtained from the user info endpoint

It allows for authorization rules (based on Requires primitive) that be matched against the
set of claims provided in the id_token/userinfo.

It supports multiple OpenID Connect Providers by reading provider metadata files from a
metadata directory (set by MACMetadataDir). The provider metadata files must follow the
naming convention "<urlencoded-issuer>.provider" (with the "https://" prefix stripped).

It supports OpenID Connect Dynamic Client Registration by setting MACMetadataDir (which needs
to be writable for the Apache process in this case), a provider metadata file exists but for the
specified issuer, it contains a registration_endpoint setting, but no matching valid client
metadata (cq."<urlencoded-issuer>.client") file can be found in the metadata directory.

It supports OpenID Provider Discovery through account names (cq. <name>@<domain>) by setting
MACMetadataDir (which needs to be writable for the Apache process in this case), and
calling (HTTP GET) the Redirect URI with a "mac_acct" parameter that contains the user account
name (see sample config for multiple OPs and an external Discovery page below).

Additionally it can operate as an OAuth 2.0 Resource Server to a PingFederate OAuth 2.0
Authorization Server, cq. validate Bearer access_tokens against PingFederate.
In that case it sets the REMOTE_USER variable to the "Username" claim and matches the claims
in the intro-spected access_token against the Requires primitive.

It implements server-side caching across different Apache processes through one of the following options:
 a) file storage: in a temp directory - possibly a shared file system across multiple Apache servers
 b) shared memory: shared across a single logical Apache server running in multiple Apache processes (mpm_prefork) on the same machine
 c) memcache: shared across multiple Apache processes and servers, possibly across different memcache servers living on different machines



Example config for using Google Apps as your OpenID Connect Provider:
(running on localhost and https://localhost/example/redirect_uri/ registered as redirect_uri for the client)
==========================================================
MACProviderIssuer accounts.google.com
MACProviderAuthorizationEndpoint https://accounts.google.com/o/oauth2/auth?approval_prompt=force&[hd=<your-domain>]
MACProviderTokenEndpoint https://accounts.google.com/o/oauth2/token
MACProviderTokenEndpointAuth client_secret_post
MACProviderUserInfoEndpoint https://www.googleapis.com/plus/v1/people/me/openIdConnect
MACProviderJwksUri https://www.googleapis.com/oauth2/v2/certs

MACClientID <your-client-id-administered-through-the-google-api-console>
MACClientSecret <your-client-secret-administered-through-the-google-api-console>

MACScope "openid email profile"
MACRedirectURI https://localhost/example/redirect_uri/
MACCryptoPassphrase <password>

<Location /example/>
   Authtype openid-connect
   require valid-user
</Location>
==========================================================



Another example using multiple OpenID Connect providers, which triggers OP discovery first:

MACMetadataDir points to a directory that contains files that contain per-provider configuration
data. For each provider, there are 2 types of files in the directory:
  <url-encoded-issuer-value-with-https-prefix-and-trailing-slash-stripped>.provider:
contains (standard) OpenID Connect Discovery OP JSON metadata where each name of the file is
the urlencoded issuer name of the OP that is decribed by the metadata in that file.
  <url-encoded-issuer-value-with-https-prefix-and-trailing-slash-stripped>.client:
contains mod_auth_connect specific JSON metadata (based on the OpenID Connect Client Registration
specification, with extensions) and the filename is the urlencoded issuer name of the OP that
this client is registered with.

Sample client metdata for issuer https://localhost:9031, so client metadata filename is:
"https%3a%2f%2fmacbook%3a9031.client"
==========================================================
{
  "ssl_validate_server" : "Off",
  "client_id" : "ac_oic_client",
  "client_secret" : "abc123DEFghijklmnop4567rstuvwxyzZYXWUT8910SRQPOnmlijhoauthplaygroundapplication",
  "scope" : "openid email profile",
}
==========================================================

And the related mod_auth_connect Apache config section:
==========================================================
MACMetadataDir <somewhere>/metadata

MACRedirectURI https://localhost/example/redirect_uri/
MACCryptoPassphrase <password>

<Location /example/>
   Authtype openid-connect
   require valid-user
</Location>
==========================================================

If you do not want to use the internal discovery page, you can have the user being redirected to
an external discovery page by setting "MACDiscoveryURL". That URL will be accessed with 2 parameters,
"mac_callback" and "mac_return" (both URLs). The "mac_return" parameter needs to be returned to the
"mac_callback" URL (again in the mac_return parameter) together with an "mac_provider" parameter that
contains the URL-encoded issuer value of the selected Provider, or a URL-encoded account name for OpenID
Connect Discovery purposes (aka. e-mail style identifier), or a domain name.

Sample callback:
  ${mac_callback}?mac_return=${mac_return}&mac_provider=[${issuer}|${domain}|${e-mail-style-account-name}]



Another example config for using PingFederate as your OpenID OP and/or OAuth 2.0 Authorization
server, based on the OAuth 2.0 PlayGround 3.x default configuration and doing claims-based authorization.
(running on localhost and https://localhost/example/redirect_uri/ registerd as redirect_uri for the client "ac_oic_client")

==========================================================
MACProviderIssuer https://macbook:9031
MACProviderAuthorizationEndpoint https://macbook:9031/as/authorization.oauth2
MACProviderTokenEndpoint https://macbook:9031/as/token.oauth2
MACProviderTokenEndpointAuth client_secret_basic
MACProviderUserInfoEndpoint https://macbook:9031/idp/userinfo.openid
MACProviderJwksUri https://macbook:9031/pf/JWKS

MACSSLValidateServer Off
MACClientID ac_oic_client
MACClientSecret abc123DEFghijklmnop4567rstuvwxyzZYXWUT8910SRQPOnmlijhoauthplaygroundapplication

MACRedirectURI https://localhost/example/redirect_uri/
MACCryptoPassphrase <password>
MACScope "openid email profile"

MACOAuthEndpoint https://macbook:9031/as/token.oauth2
MACOAuthEndpointAuth client_secret_basic

MACOAuthSSLValidateServer Off
MACOAuthClientID rs_client
MACOAuthClientSecret 2Federate

<Location /example/>
   Authtype openid-connect
   #require valid-user
   require claim sub:joe
</Location>

<Location /example2>
   Authtype oauth20
   #require valid-user
   require claim Username:joe
</Location>
==========================================================
