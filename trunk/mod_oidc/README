mod_oidc is an Apache authentication/authorization module that allows an Apache server
to operate as an OpenID Connect Relying Party.

It requires users to authenticate at an external OpenID Connect Identity Provider
using the OpenID Connect Basic Client or Implicit Client profile.

It sets the REMOTE_USER variable to the id_token sub claim, other id_token claims
are passed in HTTP headers, together with those (optionally) obtained from the user info endpoint

It allows for authorization rules (based on Requires primitive) that be matched against the
set of claims provided in the id_token/userinfo.

It supports multiple OpenID Connect Providers by reading provider metadata files from a
metadata directory (set by OIDCMetadataDir). The provider metadata files must follow the
naming convention "<urlencoded-issuer>.provider" (with the "https://" prefix stripped).

It supports OpenID Connect Dynamic Client Registration by setting OIDCMetadataDir (which needs
to be writeable for the Apache process in this case), a provider metadata file exists but for the
specified issuer, it contains a registration_endpoint setting, but no matching valid client
metadata (cq."<urlencoded-issuer>.client") file can be found in the metadata directory.

It supports OpenID Provider Discovery through account names (cq. <name>@<domain>) by setting
OIDCMetadataDir (which needs to be writable for the Apache process in this case), and
calling (HTTP GET) the Redirect URI with an oidc_acct parameter that contains the user account
name (see sample config for multiple OPs and an external Discovery page below).

Additionally it can operate as an OAuth 2.0 Resource Server to a PingFederate OAuth 2.0
Authorization Server, cq. validate Bearer access_tokens against PingFederate.
In that case it sets the REMOTE_USER variable to the "Username" claim and matches the claims
in the intro-spected access_token against the Requires primitive.

It implements server-side caching across different Apache processes through file storage in a temp directory.


Example config for using Google Apps as your OpenID Connect Provider:
(running on localhost and https://localhost/example/ registered as redirect_uri for the client)
==========================================================
OIDCProviderIssuer accounts.google.com
OIDCProviderAuthorizationEndpoint https://accounts.google.com/o/oauth2/auth?approval_prompt=force&[hd=<your-domain>]
OIDCProviderTokenEndpoint https://accounts.google.com/o/oauth2/token
OIDCProviderTokenEndpointAuth client_secret_post
OIDCProviderUserInfoEndpoint https://www.googleapis.com/plus/v1/people/me/openIdConnect
OIDCProviderJwksUri https://www.googleapis.com/oauth2/v2/certs

OIDCClientID <your-client-id-administered-through-the-google-api-console>
OIDCClientSecret <your-client-secret-administered-through-the-google-api-console>

OIDCScope "openid email profile"
OIDCRedirectURI https://localhost/example/
OIDCCryptoPassphrase <password>

<Location /example/>
   Authtype openid-connect
   require valid-user
</Location>
==========================================================



Another example using multiple OpenID Connect providers, which triggers OP discovery first:

OIDCMetadataDir points to a directory that contains files that contain per-provider configuration
data. For each provider, there are 2 types of files in the directory:
  <url-encoded-issuer-value-with-https-prefix-and-trailing-slash-stripped>.provider:
contains (standard) OpenID Connect Discovery OP JSON metadata where each name of the file is
the urlencoded issuer name of the OP that is decribed by the metadata in that file.
  <url-encoded-issuer-value-with-https-prefix-and-trailing-slash-stripped>.client:
contains mod_oidc specific JSON metadata (based on the OpenID Connect Client Registration
specification, with extensions) and the filename is the urlencoded issuer name of the OP that
this client is registered with.

Sample client metdata for issuer https://localhost:9031, so client metadata filename is:
"https%3a%2f%2fmacbook%3a9031.client"
==========================================================
{
  "ssl_validate_server" : "Off",
  "client_id" : "ac_oic_client",
  "client_secret" : "abc123DEFghijklmnop4567rstuvwxyzZYXWUT8910SRQPOnmlijhoauthplaygroundapplication",
  "scope" : "openid email profile",
}
==========================================================

And the related mod_oidc Apache config section:
==========================================================
OIDCMetadataDir <somewhere>/metadata

OIDCRedirectURI https://localhost/example/
OIDCCryptoPassphrase <password>

<Location /example/>
   Authtype openid-connect
   require valid-user
</Location>
==========================================================

If you do not want to use the internal discovery page, you can have the user being redirected to
an external discovery page by setting "OIDCDiscoveryURL". That URL will be accessed with 2 parameters,
"oidc_callback" and "oidc_return" (both URLs). The "oidc_return" parameter needs to be returned to the
"oidc_callback" URL (again in the oidc_return parameter) together with an "oidc_provider" parameter that
contains the URL-encoded issuer value of the selected Provider, or a URL-encoded account name for OpenID
Connect Discovery purposes (aka. e-mail style identifier), or a domain name.

Sample callback:
  ${oidc_callback}?oidc_return=${oidc_return}&oidc_provider=[${issuer}|${domain}|${e-mail-style-account-name}]

Another example config for using PingFederate as your OpenID OP and/or OAuth 2.0 Authorization
server, based on the OAuth 2.0 PlayGround 3.x default configuration and doing claims-based authorization.
(running on localhost and https://localhost/example/ registerd as redirect_uri for the client "ac_oic_client")

==========================================================
OIDCProviderIssuer https://macbook:9031
OIDCProviderAuthorizationEndpoint https://macbook:9031/as/authorization.oauth2
OIDCProviderTokenEndpoint https://macbook:9031/as/token.oauth2
OIDCProviderTokenEndpointAuth client_secret_basic
OIDCProviderUserInfoEndpoint https://macbook:9031/idp/userinfo.openid
OIDCProviderJwksUri https://macbook:9031/pf/JWKS

OIDCSSLValidateServer Off
OIDCClientID ac_oic_client
OIDCClientSecret abc123DEFghijklmnop4567rstuvwxyzZYXWUT8910SRQPOnmlijhoauthplaygroundapplication

OIDCRedirectURI https://localhost/example/
OIDCCryptoPassphrase <password>
OIDCScope "openid email profile"

OIDCOAuthEndpoint https://macbook:9031/as/token.oauth2
OIDCOAuthEndpointAuth client_secret_basic

OIDCOAuthSSLValidateServer Off
OIDCOAuthClientID rs_client
OIDCOAuthClientSecret 2Federate

<Location /example/>
   Authtype openid-connect
   #require valid-user
   require claim sub:joe
</Location>

<Location /example2>
   Authtype oauth20
   #require valid-user
   require claim Username:joe
</Location>
==========================================================
